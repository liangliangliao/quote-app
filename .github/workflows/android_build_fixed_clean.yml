name: Build Android APK (Flutter)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build-android:
    runs-on: ubuntu-latest

    env:
      PROJECT_DIR: project

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle

      - name: Setup Flutter 3.22.0
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.22.0"
          channel: stable
          cache: true

      # 选出最后一次被提交改动的 zip（同仓多 ZIP 时总是取最新）
      - name: Pick latest ZIP in repo by last commit time
        id: pickzip
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t FILES < <(git ls-files '*.zip')
          if [ ${#FILES[@]} -eq 0 ]; then
            echo "❌ No zip files found."
            exit 1
          fi
          latest=""
          latest_ts=0
          for f in "${FILES[@]}"; do
            ts=$(git log -1 --format=%ct -- "$f" || echo 0)
            if (( ts > latest_ts )); then latest_ts=$ts; latest="$f"; fi
          done
          echo "LATEST_ZIP=$latest" >> "$GITHUB_ENV"
          echo "Picked: $latest"

      - name: Install unzip tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y unzip p7zip-full

      - name: Unzip project
        shell: bash
        run: |
          set -euo pipefail
          rm -rf "$PROJECT_DIR"
          mkdir -p "$PROJECT_DIR"
          unzip -q "$LATEST_ZIP" -d "$PROJECT_DIR" || 7z x "$LATEST_ZIP" -o"$PROJECT_DIR" -y >/dev/null

          # 自动解析真正含 pubspec.yaml 的目录（避免 zip 顶层多一层文件夹）
          if [ ! -f "$PROJECT_DIR/pubspec.yaml" ]; then
            inner=$(find "$PROJECT_DIR" -maxdepth 3 -type f -name pubspec.yaml | head -n1 || true)
            if [ -z "$inner" ]; then
              echo "❌ pubspec.yaml not found after unzip"
              find "$PROJECT_DIR" -maxdepth 3 -print
              exit 1
            fi
            realdir=$(dirname "$inner")
            echo "PROJECT_DIR=$realdir" >> "$GITHUB_ENV"
            echo "Resolved PROJECT_DIR=$realdir"
          else
            echo "PROJECT_DIR=$PROJECT_DIR" >> "$GITHUB_ENV"
            echo "Resolved PROJECT_DIR=$PROJECT_DIR"
          fi

      # ✅ 正确安装 Android SDK（多行写法，每个包独立一行）
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: 11076708
          packages: |
            platform-tools
            build-tools;34.0.0
            platforms;android-34

      # 导出 ANDROID_* 与 FLUTTER_* 变量，供 settings.gradle 定位 loader
      - name: Export ANDROID & FLUTTER envs
        shell: bash
        run: |
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH

          FLUTTER_BIN="$(which flutter)"
          FLUTTER_SDK="$(dirname "$(dirname "$(readlink -f "$FLUTTER_BIN")")")"
          echo "FLUTTER_BIN=$FLUTTER_BIN" >> $GITHUB_ENV
          echo "FLUTTER_SDK=$FLUTTER_SDK" >> $GITHUB_ENV

          flutter config --android-sdk "$ANDROID_SDK_ROOT"
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses >/dev/null

      - name: Write android/local.properties
        shell: bash
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          set -euo pipefail
          mkdir -p android
          {
            printf "sdk.dir=%s\n" "$ANDROID_SDK_ROOT"
            printf "flutter.sdk=%s\n" "$FLUTTER_SDK"
          } > android/local.properties
          echo "----- android/local.properties -----"
          cat android/local.properties

      - name: Quick sanity check
        shell: bash
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          set -euo pipefail
          test -f pubspec.yaml
          test -f android/settings.gradle
          test -f android/app/build.gradle

          echo "----- android/app/build.gradle head -----"
          head -n 40 android/app/build.gradle || true
          echo "----- android/settings.gradle -----"
          sed -n '1,120p' android/settings.gradle || true

      - name: Flutter clean & pub get
        shell: bash
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter --version
          flutter clean
          flutter pub get

      - name: Build release APK
        shell: bash
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          set -euo pipefail
          flutter build apk --release -v
          echo "----- APK dir -----"
          find build/app/outputs -maxdepth 3 -type f -print || true

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: |
            ${{ env.PROJECT_DIR }}/build/app/outputs/flutter-apk/app-release.apk
            ${{ env.PROJECT_DIR }}/build/app/outputs/flutter-apk/app-debug.apk
          if-no-files-found: warn
