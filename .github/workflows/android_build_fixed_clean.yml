name: Build Android APK (Flutter)

on:
  workflow_dispatch:
    inputs:
      build_mode:
        description: Build mode
        type: choice
        default: release
        options: [release, debug]
  push:
    # 监听所有 zip 和常用项目文件，避免只认固定 zip 文件名
    paths:
      - '**.dart'
      - 'pubspec.yaml'
      - 'pubspec.lock'
      - 'android/**'
      - '.github/workflows/android_build.yml'
      - '*.zip'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      JAVA_TOOL_OPTIONS: -Xmx4g
      GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx4g -Dfile.encoding=UTF-8"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Flutter 3.22.0
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'
          channel: 'stable'
          cache: true

      # 选取“最新”的 zip（按修改时间倒序）
      - name: Pick newest zip
        id: pick_zip
        shell: bash
        run: |
          set -euo pipefail
          # 找出仓库中所有 zip（仅限仓库根；若需要递归可改成 git ls-files 或 find）
          MAP="$(ls -1t *.zip 2>/dev/null || true)"
          if [[ -z "$MAP" ]]; then
            echo "::error::仓库根目录未找到任何 zip"
            exit 1
          fi
          ZIP="$(echo "$MAP" | head -n1)"
          echo "选中的 zip: $ZIP"
          echo "zip_path=$ZIP" >> "$GITHUB_OUTPUT"

      - name: Extract selected zip to ./project
        shell: bash
        run: |
          set -euo pipefail
          rm -rf project
          mkdir -p project
          unzip -q "${{ steps.pick_zip.outputs.zip_path }}" -d project
          echo "Top-level of project/:"
          ls -la project

      # 基础自检，避免解错包
      - name: Sanity check project
        working-directory: project
        shell: bash
        run: |
          set -euo pipefail
          [[ -f pubspec.yaml ]] || { echo "::error::缺少 pubspec.yaml"; exit 1; }
          [[ -d android ]] || { echo "::error::缺少 android 目录"; exit 1; }
          echo "pubspec.yaml (head):"
          head -n 30 pubspec.yaml || true

      - name: Ensure android/local.properties (flutter.sdk)
        working-directory: project
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p android
          # 写入 flutter.sdk，优先用动作的安装路径；也兼容环境变量
          SDK_PATH="${FLUTTER_HOME:-${FLUTTER_ROOT:-/opt/hostedtoolcache/flutter/stable-3.22.0-x64}}"
          echo "flutter.sdk=${SDK_PATH}" > android/local.properties
          echo "android/local.properties:"
          cat android/local.properties

      - name: Flutter pub get
        working-directory: project
        run: flutter pub get

      - name: Flutter clean
        working-directory: project
        run: flutter clean

      - name: Build APK
        working-directory: project
        shell: bash
        run: |
          set -euo pipefail
          MODE="${{ inputs.build_mode || 'release' }}"
          if [[ "$MODE" == "debug" ]]; then
            flutter build apk --debug --verbose
          else
            flutter build apk --release --verbose
          fi

      - name: Locate APK
        id: find_apk
        working-directory: project
        shell: bash
        run: |
          set -euo pipefail
          # Flutter 默认产物目录
          APK=$(ls -1 build/app/outputs/flutter-apk/*.apk 2>/dev/null | head -n1 || true)
          if [[ -z "$APK" ]]; then
            echo "::error::未在 build/app/outputs/flutter-apk 下找到 APK"
            echo "尝试列出所有 *.apk："
            find build -type f -name '*.apk' -print || true
            exit 1
          fi
          echo "apk_path=$APK" >> "$GITHUB_OUTPUT"
          echo "Found APK: $APK"

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: flutter-apk-${{ github.run_number }}
          path: project/${{ steps.find_apk.outputs.apk_path }}
          if-no-files-found: error
