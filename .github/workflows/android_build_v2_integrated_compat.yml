name: Build Android APK

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx4g"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sanity check - list repo root
        run: ls -lah

      # Pick latest ZIP in repo (prefers tracked root files; has fallbacks)
      - name: Pick latest ZIP (prefer root tracked; robust fallbacks)
        id: pickzip
        shell: bash
        run: |
          set -euo pipefail
          cd "$GITHUB_WORKSPACE"

          pick_by_git_commit() {
            printf "%s\n" "$1" | while IFS= read -r f; do
              [ -n "$f" ] || continue
              ct="$(git log -1 --format=%ct -- "$f" 2>/dev/null || echo 0)"
              printf "%s %s\n" "$ct" "$f"
            done | sort -nr | head -n1 | cut -d' ' -f2-
          }

          ROOT_TRACKED="$(git ls-files --full-name | awk '/^[^\\/]+\\.zip$/ {print}' || true)"
          SEL=""
          if [ -n "${ROOT_TRACKED:-}" ]; then
            SEL="$(pick_by_git_commit "$ROOT_TRACKED")"
          fi
          if [ -z "$SEL" ]; then
            ANY_TRACKED="$(git ls-files --full-name | awk '/\\.zip$/ {print}' || true)"
            if [ -n "${ANY_TRACKED:-}" ]; then
              SEL="$(pick_by_git_commit "$ANY_TRACKED")"
            fi
          fi
          if [ -z "$SEL" ]; then
            SEL="$(ls -1t *.zip 2>/dev/null | head -n1 || true)"
          fi
          if [ -z "$SEL" ]; then
            SEL="$(find . -maxdepth 6 -type f -name '*.zip' -printf '%T@ %p\n' 2>/dev/null | sort -nr | head -n1 | cut -d' ' -f2- || true)"
            SEL="${SEL#./}"
          fi
          [ -n "$SEL" ] || { echo "No .zip files found."; exit 1; }
          echo "Picked ZIP: $SEL"
          echo "zip=$GITHUB_WORKSPACE/$SEL" >> "$GITHUB_OUTPUT"

      - name: Unzip project
        shell: bash
        run: |
          unzip -q "${{ steps.pickzip.outputs.zip }}" -d .
          echo "After unzip:"; ls -lah

      - name: Detect project type and root
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          FLUTTER_DIR="$(find . -maxdepth 6 -type f -name pubspec.yaml | head -n1 | xargs -I{} dirname {} || true)"
          GRADLE_DIR=""
          if [ -z "$FLUTTER_DIR" ]; then
            GRADLE_DIR="$(find . -maxdepth 6 -type f \( -name settings.gradle -o -name settings.gradle.kts \) | head -n1 | xargs -I{} dirname {} || true)"
          fi
          if [ -n "$FLUTTER_DIR" ]; then
            echo "project_type=flutter" >> "$GITHUB_OUTPUT"
            echo "project_dir=$FLUTTER_DIR" >> "$GITHUB_OUTPUT"
            echo "Detected Flutter project at: $FLUTTER_DIR"
          elif [ -n "$GRADLE_DIR" ]; then
            echo "project_type=gradle" >> "$GITHUB_OUTPUT"
            echo "project_dir=$GRADLE_DIR" >> "$GITHUB_OUTPUT"
            echo "Detected Android Gradle project at: $GRADLE_DIR"
          else
            echo "❌ 未检测到 Flutter 或 Android Gradle 工程（缺少 pubspec.yaml / settings.gradle）"
            exit 2
          fi

      - name: Set up JDK 17 (for both Flutter & Gradle)
        if: steps.detect.outputs.project_type == 'flutter' || steps.detect.outputs.project_type == 'gradle'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      # Strict toolchain first
      - name: Set up Flutter (strict / 3.22)
        if: steps.detect.outputs.project_type == 'flutter'
        id: flutter_strict
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'
          channel: stable
          cache: true

      # >>> V2 migration patch (manifests + activity + remove GeneratedPluginRegistrant)
      
      - name: Patch Android project to Embedding v2
        if: steps.detect.outputs.project_type == 'flutter'
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          mapfile -t MANIS < <(find android/app/src -type f -name AndroidManifest.xml)

          for MANI in "${MANIS[@]}"; do
            echo "Normalizing ${MANI}"

            # 1) 删除 v1 Application 声明（如果有）
            sed -i -E 's/\s*android:name="io\.flutter\.app\.FlutterApplication"//g' "$MANI"

            # 2) 在 <application> 内确保有 flutterEmbedding=2 的 meta-data
            if ! grep -q 'android:name="flutterEmbedding"' "$MANI"; then
              awk '
                BEGIN{added=0}
                /<application[^>]*>/{
                  print
                  if(added==0){
                    print "        <meta-data android:name=\"flutterEmbedding\" android:value=\"2\"/>"
                    added=1
                    next
                  }
                }
                {print}
              ' "$MANI" > "$MANI.__tmp__" && mv "$MANI.__tmp__" "$MANI"
            fi

            # 3) 若显式写了 FlutterActivity，替换为 .MainActivity（更稳）
            sed -i -E 's/android:name="io\.flutter\.embedding\.android\.FlutterActivity"/android:name=".MainActivity"/g' "$MANI"
          done

          echo "== After patch, quick check =="
          grep -R -nE 'flutterEmbedding|io\.flutter\.app\.FlutterApplication' android/app/src || true
      # >>> Dependency upgrade with Dart-aware pins (avoid image_picker >=1.2.0 on Dart <3.6)
      - name: Upgrade dependencies to v2-safe set
        if: steps.detect.outputs.project_type == 'flutter'
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          DART_VER="$(dart --version 2>&1 | sed -n 's/^Dart SDK version: \\([0-9.]*\\).*/\\1/p')"
          echo "Detected Dart SDK: $DART_VER"
          # version_lt A B => true if A < B
          version_lt() { [ "$(printf '%s\\n%s\\n' "$1" "$2" | sort -V | head -n1)" != "$2" ]; }

          IMG_PICKER_VER="^1.2.0"
          if version_lt "$DART_VER" "3.6.0"; then
            IMG_PICKER_VER="^1.1.2"
          fi
          echo "Pin image_picker to: $IMG_PICKER_VER (compatible with Dart $DART_VER)"

          # Pin/set core packages (best-effort; don't fail the build if add fails)
          dart pub add workmanager:^0.7.0 || true
          dart pub add android_alarm_manager_plus:^4.0.8 || true
          # image_picker may already exist; try upgrade pin, fallback to 1.1.2
          if ! dart pub add "image_picker:${IMG_PICKER_VER}"; then
            echo "Falling back to image_picker:^1.1.2"
            dart pub add image_picker:^1.1.2 || true
          fi
          # Only add flutter_local_notifications if it's missing; leave resolver choose otherwise
          if ! grep -q '^[[:space:]]*flutter_local_notifications:' pubspec.yaml; then
            dart pub add flutter_local_notifications:^17.2.4 || true
          fi

          flutter pub get
          echo "== Dependency resolution done =="
          [ -f .flutter-plugins ] && sed -n '1,120p' .flutter-plugins || true
          [ -f .flutter-plugins-dependencies ] && sed -n '1,120p' .flutter-plugins-dependencies || true

      # Deep diagnosis of v1 markers in app (do not fail build here)
      - name: Deep diagnose v1 markers in app code & manifests
        if: steps.detect.outputs.project_type == 'flutter'
        id: v1app
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          echo "== Scan app(android/) for v1 markers =="
          APP_MATCHES="$(grep -R --include=*.kt --include=*.java -nE \
            'io\\.flutter\\.app\\.(Flutter(Activity|FragmentActivity|Application))|io\\.flutter\\.view\\.FlutterMain|GeneratedPluginRegistrant\\.registerWith|PluginRegistry(\\.Registrar)?|registerWith\\s*\\(|ShimPluginRegistry|PluginRegistrantCallback' \
            android 2>/dev/null || true)"
          echo "$APP_MATCHES"
          echo "== Scan ALL manifests =="
          MANI_MATCHES="$(grep -R -nE 'io\\.flutter\\.app\\.FlutterApplication|android:name=\"io\\.flutter\\.app\\.FlutterApplication\"' android/app/src 2>/dev/null || true)"
          echo "$MANI_MATCHES"
          CNT=0
          [ -n "$APP_MATCHES" ] && CNT=$((CNT+1))
          [ -n "$MANI_MATCHES" ] && CNT=$((CNT+1))
          echo "count=$CNT" >> "$GITHUB_OUTPUT"

      # Diagnose plugins for v1 references (count only)
      - name: Diagnose Android v1 offenders in plugins (do not fail, count only)
        if: steps.detect.outputs.project_type == 'flutter'
        id: v1plugins
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          PUB_CACHE="${PUB_CACHE:-$HOME/.pub-cache}"
          echo "Scanning $PUB_CACHE for Android v1 markers..."
          MATCHES="$(grep -R --include=*.java --include=*.kt -nE \
            'io\\.flutter\\.app\\.(Flutter(Activity|FragmentActivity|Application))|io\\.flutter\\.view\\.FlutterMain|PluginRegistry(\\.Registrar)?|registerWith\\s*\\(|ShimPluginRegistry|GeneratedPluginRegistrant\\.registerWith|PluginRegistrantCallback' \
            "$PUB_CACHE" 2>/dev/null || true)"
          echo "$MATCHES"
          COUNT=0
          [ -n "$MATCHES" ] && COUNT=1
          echo "count=$COUNT" >> "$GITHUB_OUTPUT"

      # If both app+plugins show no v1 markers, optionally bypass the flutter_tools v1 gate (CI only)
      - name: TEMP:bypass v1 gate in flutter_tools (CI only; safe when both counts=0)
        if: steps.detect.outputs.project_type == 'flutter' && steps.v1app.outputs.count == '0' && steps.v1plugins.outputs.count == '0'
        shell: bash
        run: |
          set -euo pipefail
          echo "FLUTTER_ROOT = ${FLUTTER_ROOT}"
          TOOLS_DIR="$FLUTTER_ROOT/packages/flutter_tools/lib/src"
          sed -i 's/checkForDeprecation();//' "$TOOLS_DIR/project.dart" || true
          sed -i "s/Build failed due to use of deleted Android v1 embedding\\./Bypassed v1 gate in CI./" "$TOOLS_DIR/project.dart" || true

      - name: Build APK (Flutter 3.22 strict)
        if: steps.detect.outputs.project_type == 'flutter' && steps.v1app.outputs.count == '0' && steps.v1plugins.outputs.count == '0'
        working-directory: ${{ steps.detect.outputs.project_dir }}
        run: flutter build apk --release -v

      # Fallback to 3.19.6 if any v1 traces remain
      - name: Set up Flutter (fallback / 3.19.6 v1-compatible)
        if: steps.detect.outputs.project_type == 'flutter' && (steps.v1app.outputs.count != '0' || steps.v1plugins.outputs.count != '0')
        id: flutter_fallback
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.6'
          channel: stable
          cache: true

      - name: Pub get (fallback)
        if: steps.detect.outputs.project_type == 'flutter' && (steps.v1app.outputs.count != '0' || steps.v1plugins.outputs.count != '0')
        working-directory: ${{ steps.detect.outputs.project_dir }}
        run: flutter pub get

      - name: Build APK (Flutter fallback 3.19.6)
        if: steps.detect.outputs.project_type == 'flutter' && (steps.v1app.outputs.count != '0' || steps.v1plugins.outputs.count != '0')
        working-directory: ${{ steps.detect.outputs.project_dir }}
        run: flutter build apk --release -v

      - name: Upload APK (Flutter)
        if: steps.detect.outputs.project_type == 'flutter'
        uses: actions/upload-artifact@v4
        with:
          name: quote_app-apk
          path: ${{ steps.detect.outputs.project_dir }}/build/app/outputs/flutter-apk/app-release.apk

      # ---------- Gradle path (fallback) ----------
      - name: Set up Gradle 8.4
        if: steps.detect.outputs.project_type == 'gradle'
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.4

      - name: Assemble debug with Gradle wrapper
        if: steps.detect.outputs.project_type == 'gradle'
        working-directory: ${{ steps.detect.outputs.project_dir }}
        run: |
          if [[ -x "./gradlew" ]]; then
            ./gradlew assembleDebug
          else
            gradle assembleDebug --no-daemon
          fi

      - name: Upload APK (Gradle)
        if: steps.detect.outputs.project_type == 'gradle'
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: |
            ${{ steps.detect.outputs.project_dir }}/**/outputs/apk/**/*.apk
