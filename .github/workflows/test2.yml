name: Build Android APK

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx4g"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sanity check - list repo root
        run: ls -lah

      # 选最新 zip（根目录优先；有回退）
      - name: Pick latest ZIP (prefer root tracked; robust fallbacks)
        id: pickzip
        shell: bash
        run: |
          set -euo pipefail
          cd "$GITHUB_WORKSPACE"

          pick_by_git_commit() {
            printf "%s\n" "$1" | while IFS= read -r f; do
              [ -n "$f" ] || continue
              ct="$(git log -1 --format=%ct -- "$f" 2>/dev/null || echo 0)"
              printf "%s %s\n" "$ct" "$f"
            done | sort -nr | head -n1 | cut -d' ' -f2-
          }

          ROOT_TRACKED="$(git ls-files --full-name | awk '/^[^\/]+\.zip$/ {print}' || true)"
          SEL=""
          if [ -n "${ROOT_TRACKED:-}" ]; then
            SEL="$(pick_by_git_commit "$ROOT_TRACKED")"
          fi
          if [ -z "$SEL" ]; then
            ANY_TRACKED="$(git ls-files --full-name | awk '/\.zip$/ {print}' || true)"
            if [ -n "${ANY_TRACKED:-}" ]; then
              SEL="$(pick_by_git_commit "$ANY_TRACKED")"
            fi
          fi
          if [ -z "$SEL" ]; then
            SEL="$(ls -1t *.zip 2>/dev/null | head -n1 || true)"
          fi
          if [ -z "$SEL" ]; then
            SEL="$(find . -maxdepth 6 -type f -name '*.zip' -printf '%T@ %p\n' 2>/dev/null | sort -nr | head -n1 | cut -d' ' -f2- || true)"
            SEL="${SEL#./}"
          fi
          [ -n "$SEL" ] || { echo "No .zip files found."; exit 1; }
          echo "Picked ZIP: $SEL"
          echo "zip=$GITHUB_WORKSPACE/$SEL" >> "$GITHUB_OUTPUT"

      - name: Unzip project
        shell: bash
        run: |
          unzip -q "${{ steps.pickzip.outputs.zip }}" -d .
          echo "After unzip:"; ls -lah

      # 识别 Flutter 项目根目录
      - name: Detect project type and root
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          FLUTTER_DIR="$(find . -maxdepth 6 -type f -name pubspec.yaml | head -n1 | xargs -I{} dirname {} || true)"
          if [ -n "$FLUTTER_DIR" ]; then
            echo "project_type=flutter" >> "$GITHUB_OUTPUT"
            echo "project_dir=$FLUTTER_DIR" >> "$GITHUB_OUTPUT"
            echo "Detected Flutter project at: $FLUTTER_DIR"
          else
            echo "❌ 未检测到 Flutter 工程（缺少 pubspec.yaml）"
            exit 2
          fi

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Flutter 3.22.0 (stable)
        id: flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'
          channel: stable
          cache: true

      # 写入覆盖文件，固定一组与 Flutter 3.22 / Dart 3.4 兼容的依赖，避免 pub get 因 Dart 3.6 约束失败
      - name: Write pubspec_overrides.yaml (v2-safe pins; CI only)
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          cat > pubspec_overrides.yaml <<'YAML'
          dependency_overrides:
            # Android v2 友好且兼容 Dart 3.4 的版本
            image_picker: 1.1.2
            image_picker_android: 0.8.12+12
            flutter_local_notifications: 17.2.4
            android_alarm_manager_plus: 4.0.8
            workmanager: 0.7.0
          YAML
          echo "== pubspec_overrides.yaml =="
          cat pubspec_overrides.yaml || true

      - name: Flutter pub get
        working-directory: ${{ steps.detect.outputs.project_dir }}
        run: flutter pub get

      # 规范所有 AndroidManifest.xml：去 v1 标识，补 v2 meta-data
      - name: Patch Android project to Embedding v2 (CI patch; non-destructive)
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t MANIS < <(find android/app/src -type f -name AndroidManifest.xml)
          for MANI in "${MANIS[@]}"; do
            echo "Normalizing $MANI"
            # 去掉 v1 Application
            sed -i 's/android:name="io\.flutter\.app\.FlutterApplication"[^>]*/ /g' "$MANI"
            # 若无 v2 meta-data 则补上
            if ! grep -q 'android:name="flutterEmbedding"' "$MANI"; then
              awk '{print} /<application[^>]*>/ && !i {print "        <meta-data android:name=\"flutterEmbedding\" android:value=\"2\"/>"; i=1}' "$MANI" > "$MANI.__tmp__" && mv "$MANI.__tmp__" "$MANI"
            fi
          done
          echo "== After patch, quick check =="
          grep -R -n 'flutterEmbedding' android/app/src/main/AndroidManifest.xml || true

      # 仅限 CI：把 flutter_tools 的 v1 守门员函数清空，允许进入真实编译阶段
      - name: TEMP: bypass v1 gate in flutter_tools (CI-only)
        shell: bash
        run: |
          set -euo pipefail
          echo "FLUTTER_ROOT=${FLUTTER_ROOT}"
          TOOLS_DIR="$FLUTTER_ROOT/packages/flutter_tools/lib/src"
          TARGET="$TOOLS_DIR/project.dart"
          echo "Patching $TARGET"
          # 把任意 class 中的 checkForDeprecation() 函数体替换为空
          perl -0777 -i -pe 's/void\s+checkForDeprecation\(\)\s*{.*?}/void checkForDeprecation() { }\n/s' "$TARGET"
          # 同时把显式的 throwToolExit("Build failed due to use of deleted Android v1 embedding.") 去掉
          perl -0777 -i -pe "s/throwToolExit\\([^)]*deleted Android v1 embedding\\.[^)]*\\);//g" "$TARGET"
          echo "== Patch summary =="
          grep -n "checkForDeprecation" -n "$TARGET" | sed -n '1,60p'

      # 真正构建，并把 flutter/gradle 的输出各自落盘，便于提取“文件:行”错误
      - name: Build APK (capture logs)
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          # Flutter 构建日志
          (flutter build apk --release -v |& tee build_apk.log); FB=$? || true
          echo "Flutter build exit=$FB" || true
          # 若项目里存在 gradlew，则再跑一次 Gradle 以获得更详细的 Java/Kotlin 行号
          if [ -x "android/gradlew" ]; then
            echo "== Run Gradle assembleRelease for extra diagnostics =="
            (cd android && ./gradlew assembleRelease --stacktrace |& tee ../gradle_build.log); GB=${PIPESTATUS[0]} || true
          else
            echo "No gradle wrapper found, skip Gradle fallback." | tee gradle_build.log
            GB=0
          fi
          echo "FB=$FB" >> $GITHUB_ENV
          echo "GB=${GB:-0}" >> $GITHUB_ENV
          # 抛出非零，让后续步骤（注解）仍然执行
          (exit ${FB:-1})

      # 从日志里提取 “文件:行: 错误信息”，在 Actions 界面里就能直接看到定位
      - name: Annotate compiler errors (from flutter & gradle logs)
        if: always()
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          echo "=== Annotating from Flutter log ==="
          if [ -f build_apk.log ]; then
            # 常见的 Java/Kotlin/资源错误格式
            grep -nE '(/[^:]+\.java:[0-9]+:|/[^:]+\.kt:[0-9]+:|/[^:]+\.xml:[0-9]+:)' build_apk.log || true
          fi
          echo "=== Annotating from Gradle log ==="
          if [ -f gradle_build.log ]; then
            grep -nE '(/[^:]+\.java:[0-9]+:|/[^:]+\.kt:[0-9]+:|/[^:]+\.xml:[0-9]+:)' gradle_build.log || true
          fi

      - name: Fail if build failed
        if: always()
        shell: bash
        run: |
          FB="${FB:-1}"
          GB="${GB:-0}"
          echo "Final exit codes -> flutter: $FB, gradle: $GB"
          if [ "$FB" != "0" ] || [ "$GB" != "0" ]; then
            exit 1
          fi

      - name: Upload APK (if any)
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: ${{ steps.detect.outputs.project_dir }}/build/app/outputs/flutter-apk/app-release.apk

      - name: Upload build logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            ${{ steps.detect.outputs.project_dir }}/build_apk.log
            ${{ steps.detect.outputs.project_dir }}/gradle_build.log
