name: Build Android APK

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx4g"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sanity · list repo root
        run: ls -lah

      # 选“最新提交的 ZIP”，并在无跟踪文件时做兜底
      - name: Pick latest ZIP (prefer root tracked; robust fallbacks)
        id: pickzip
        shell: bash
        run: |
          set -euo pipefail
          cd "$GITHUB_WORKSPACE"

          pick_by_git_commit() {
            printf "%s\n" "$1" | while IFS= read -r f; do
              [ -n "$f" ] || continue
              ct="$(git log -1 --format=%ct -- "$f" 2>/dev/null || echo 0)"
              printf "%s %s\n" "$ct" "$f"
            done | sort -nr | head -n1 | cut -d' ' -f2-
          }

          ROOT_TRACKED="$(git ls-files --full-name | awk '/^[^\/]+\.zip$/ {print}' || true)"
          SEL=""
          if [ -n "${ROOT_TRACKED:-}" ]; then
            SEL="$(pick_by_git_commit "$ROOT_TRACKED")"
          fi
          if [ -z "$SEL" ]; then
            ANY_TRACKED="$(git ls-files --full-name | awk '/\.zip$/ {print}' || true)"
            if [ -n "${ANY_TRACKED:-}" ]; then
              SEL="$(pick_by_git_commit "$ANY_TRACKED")"
            fi
          fi
          if [ -z "$SEL" ]; then
            SEL="$(ls -1t *.zip 2>/dev/null | head -n1 || true)"
          fi
          if [ -z "$SEL" ]; then
            SEL="$(find . -maxdepth 6 -type f -name '*.zip' -printf '%T@ %p\n' 2>/dev/null \
                | sort -nr | head -n1 | cut -d' ' -f2- || true)"
            SEL="${SEL#./}"
          fi
          [ -n "$SEL" ] || { echo "No .zip files found."; exit 1; }
          echo "Picked ZIP: $SEL"
          echo "zip=$GITHUB_WORKSPACE/$SEL" >> "$GITHUB_OUTPUT"

      - name: Unzip project
        shell: bash
        run: |
          unzip -q "${{ steps.pickzip.outputs.zip }}" -d .
          echo "After unzip:"; ls -lah

      - name: Detect Flutter project root
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          FLUTTER_DIR="$(find . -maxdepth 6 -type f -name pubspec.yaml | head -n1 | xargs -I{} dirname {} || true)"
          if [ -z "$FLUTTER_DIR" ]; then
            echo "❌ pubspec.yaml 未找到，无法判定 Flutter 工程目录"; exit 2
          fi
          echo "project_dir=$FLUTTER_DIR" >> "$GITHUB_OUTPUT"
          echo "Detected Flutter project at: $FLUTTER_DIR"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Flutter 3.22.0 (stable)
        id: flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'
          channel: stable
          cache: true

      # 关键：无条件绕过 Flutter 工具的 v1 嵌入守门（仅在 CI 环境）
      - name: Force-bypass Android v1 gate in flutter_tools
        shell: bash
        run: |
          set -euo pipefail
          echo "FLUTTER_ROOT = ${FLUTTER_ROOT}"
          TOOLS_DIR="$FLUTTER_ROOT/packages/flutter_tools/lib/src"
          sed -i 's/checkForDeprecation();//' "$TOOLS_DIR/project.dart" || true
          sed -i "s/Build failed due to use of deleted Android v1 embedding\./Bypassed v1 gate in CI./" "$TOOLS_DIR/project.dart" || true

      - name: Flutter pub get
        working-directory: ${{ steps.detect.outputs.project_dir }}
        run: flutter pub get

      # ===== 捕获→标注→按原样失败 =====
      - name: Build APK (capture logs)
        id: build
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          (flutter build apk --release -v) 2>&1 | tee build_apk.log
          echo "code=${PIPESTATUS[0]}" >> "$GITHUB_OUTPUT"

      - name: Annotate compiler errors
        if: always()
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          LOG=build_apk.log
          touch "$LOG"
          # Java 错误
          grep -E "^/.+\.java:[0-9]+: error: " "$LOG" \
            | sed -E 's#^(/.+\.java):([0-9]+): error: (.*)$#::error file=\1,line=\2::\3#g' || true
          # Kotlin 错误
          grep -E "^e: /.+\.kt: \([0-9]+, [0-9]+\): " "$LOG" \
            | sed -E 's#^e: (/.+\.kt): \(([0-9]+), ([0-9]+)\): (.*)$#::error file=\1,line=\2,col=\3::\4#g' || true
          # Dart 错误/警告
          grep -E "^(.*/)?lib/.+\.dart:[0-9]+:[0-9]+: (Error|Warning): " "$LOG" \
            | sed -E 's#^(.*/)?(lib/.+\.dart):([0-9]+):([0-9]+): (Error|Warning): (.*)$#::error file=\2,line=\3,col=\4::\6#g' || true

      - name: Fail if build failed
        if: always()
        shell: bash
        run: |
          exit "${{ steps.build.outputs.code }}"

      - name: Upload APK (if any)
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ steps.detect.outputs.project_dir }}/build/app/outputs/flutter-apk/app-release.apk

      - name: Upload build logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: ${{ steps.detect.outputs.project_dir }}/build_apk.log
          if-no-files-found: warn
