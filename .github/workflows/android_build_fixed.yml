name: Build Android APK

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx4g"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sanity check - list repo root
        run: ls -lah

      # 选出仓库中“最后一次提交改动”的 zip（请把 CAUSE12 放根目录并为最新提交）
      - name: Pick latest ZIP in repo by last commit time
        id: pickzip
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t FILES < <(git ls-files '*.zip')
          if [ ${#FILES[@]} -eq 0 ]; then
            echo "❌ No zip files found."; exit 1
          fi
          latest=""; latest_ts=0
          for f in "${FILES[@]}"; do
            ts=$(git log -1 --format=%ct -- "$f" || echo 0)
            if (( ts > latest_ts )); then latest_ts=$ts; latest="$f"; fi
          done
          echo "LATEST_ZIP=$latest" >> "$GITHUB_ENV"
          echo "Picked ZIP: $latest"

      - name: Unzip project to workspace root
        run: |
          unzip -q "${{ steps.pick.outputs.zip }}" -d .
          echo "After unzip:"
          ls -lah

      - name: Detect project type and root
        id: detect
        shell: bash
        run: |
          set -e
          # find Flutter project root (pubspec.yaml) within depth 3
          FLUTTER_DIR="$(find . -maxdepth 3 -type f -name pubspec.yaml | head -n 1 | xargs -I{} dirname {} || true)"
          GRADLE_DIR=""
          if [[ -z "$FLUTTER_DIR" ]]; then
            # find Android Gradle settings
            GRADLE_DIR="$(find . -maxdepth 3 -type f \( -name settings.gradle -o -name settings.gradle.kts \) | head -n 1 | xargs -I{} dirname {} || true)"
          fi
          if [[ -n "$FLUTTER_DIR" ]]; then
            echo "project_type=flutter" >> $GITHUB_OUTPUT
            echo "project_dir=$FLUTTER_DIR" >> $GITHUB_OUTPUT
            echo "Detected Flutter project: $FLUTTER_DIR"
          elif [[ -n "$GRADLE_DIR" ]]; then
            echo "project_type=gradle" >> $GITHUB_OUTPUT
            echo "project_dir=$GRADLE_DIR" >> $GITHUB_OUTPUT
            echo "Detected Android Gradle project: $GRADLE_DIR"
          else
            echo "❌ 未检测到 Flutter 或 Android Gradle 工程（缺少 pubspec.yaml / settings.gradle）"; exit 1
          fi

      # ---------- Flutter path (preferred) ----------
      - name: Set up JDK 17 (for both Flutter & Gradle)
        if: steps.detect.outputs.project_type == 'flutter' || steps.detect.outputs.project_type == 'gradle'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Flutter
        if: steps.detect.outputs.project_type == 'flutter'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'
          channel: stable
          cache: true

      - name: Flutter pub get
        if: steps.detect.outputs.project_type == 'flutter'
        run: flutter pub get
        working-directory: ${{ steps.detect.outputs.project_dir }}

      - name: Ensure Android platform exists
        if: steps.detect.outputs.project_type == 'flutter'
        run: |
          if [ ! -d "android" ]; then
            flutter create . --platforms=android --project-name quote_app --org com.example
          fi
        working-directory: ${{ steps.detect.outputs.project_dir }}

      - name: Build APK (Flutter release)
        if: steps.detect.outputs.project_type == 'flutter'
        run: flutter build apk --release
        working-directory: ${{ steps.detect.outputs.project_dir }}

      - name: Upload APK (Flutter)
        if: steps.detect.outputs.project_type == 'flutter'
        uses: actions/upload-artifact@v4
        with:
          name: quote_app-apk
          path: ${{ steps.detect.outputs.project_dir }}/build/app/outputs/flutter-apk/app-release.apk

      # ---------- Gradle path (fallback) ----------
      - name: Set up Gradle 8.4
        if: steps.detect.outputs.project_type == 'gradle'
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.4

      - name: Assemble debug with Gradle wrapper
        if: steps.detect.outputs.project_type == 'gradle'
        working-directory: ${{ steps.detect.outputs.project_dir }}
        run: |
          if [[ -x "./gradlew" ]]; then
            ./gradlew assembleDebug
          else
            gradle assembleDebug --no-daemon
          fi

      - name: Upload APK (Gradle)
        if: steps.detect.outputs.project_type == 'gradle'
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: |
            ${{ steps.detect.outputs.project_dir }}/**/outputs/apk/**/*.apk
