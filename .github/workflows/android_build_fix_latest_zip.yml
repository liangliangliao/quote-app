name: Build Android APK

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx4g"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sanity check - list repo root
        run: ls -lah

      # ✅ 选取“根目录下最后一次提交”的 zip（git 提交时间），并带 mtime 回退
      - name: Pick latest committed ZIP in repo root (git)
        id: pickzip
        shell: bash
        run: |
          set -euo pipefail
          cd "$GITHUB_WORKSPACE"
          # 仅根目录、被 git 跟踪的 zip
          ZIPS="$(git ls-files --full-name | awk '/^[^\/]+\.zip$/ {print}' || true)"
          if [ -z "$ZIPS" ]; then
            echo "No tracked .zip files in repo root." >&2
            exit 1
          fi
          # 生成 "epoch path" 列表，按时间倒序取第一条
          SEL="$(printf "%s
" "$ZIPS" | while IFS= read -r z; do
                   ct="$(git log -1 --format=%ct -- "$z" 2>/dev/null || echo 0)"
                   echo "$ct $z"
                 done | sort -nr | head -n1 | cut -d' ' -f2-)"
          # 如果 git 日志异常，则按 mtime 回退
          if [ -z "$SEL" ]; then
            SEL="$(ls -1t *.zip 2>/dev/null | head -n1 || true)"
          fi
          if [ -z "$SEL" ]; then
            echo "No zip found to use." >&2
            exit 1
          fi
          echo "Picked ZIP: $SEL"
          echo "zip=$GITHUB_WORKSPACE/$SEL" >> "$GITHUB_OUTPUT"

      # ⚠️ 上面的 run: | 结束了；下面是新的 step，不能再缩进到脚本里
      - name: Unzip project
        shell: bash
        run: |
          unzip -q "${{ steps.pickzip.outputs.zip }}" -d .
          echo "After unzip:"; ls -lah

      # 检测是 Flutter 还是原生 Gradle 工程
      - name: Detect project type and root
        id: detect
        shell: bash
        run: |
          set -e
          FLUTTER_DIR="$(find . -maxdepth 4 -type f -name pubspec.yaml | head -n 1 | xargs -I{} dirname {} || true)"
          GRADLE_DIR=""
          if [[ -z "$FLUTTER_DIR" ]]; then
            GRADLE_DIR="$(find . -maxdepth 4 -type f \( -name settings.gradle -o -name settings.gradle.kts \) | head -n 1 | xargs -I{} dirname {} || true)"
          fi
          if [[ -n "$FLUTTER_DIR" ]]; then
            echo "project_type=flutter" >> $GITHUB_OUTPUT
            echo "project_dir=$FLUTTER_DIR" >> $GITHUB_OUTPUT
            echo "Detected Flutter project: $FLUTTER_DIR"
          elif [[ -n "$GRADLE_DIR" ]]; then
            echo "project_type=gradle" >> $GITHUB_OUTPUT
            echo "project_dir=$GRADLE_DIR" >> $GITHUB_OUTPUT
            echo "Detected Android Gradle project: $GRADLE_DIR"
          else
            echo "❌ 未检测到 Flutter 或 Android Gradle 工程（缺少 pubspec.yaml / settings.gradle）" >&2
            exit 1
          fi

      # ---------- Flutter path ----------
      - name: Set up JDK 17 (for both Flutter & Gradle)
        if: steps.detect.outputs.project_type == 'flutter' || steps.detect.outputs.project_type == 'gradle'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Flutter
        if: steps.detect.outputs.project_type == 'flutter'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'
          channel: stable
          cache: true

      - name: Flutter pub get (and pin workmanager)
        if: steps.detect.outputs.project_type == 'flutter'
        working-directory: ${{ steps.detect.outputs.project_dir }}
        run: |
          rm -rf "$HOME/.pub-cache"
          dart pub add workmanager:^0.7.0
          flutter pub get
          flutter pub deps --style=compact | sed -n '/direct dependencies:/,/dev dependencies:/p'

      - name: Ensure Android platform exists
        if: steps.detect.outputs.project_type == 'flutter'
        working-directory: ${{ steps.detect.outputs.project_dir }}
        run: |
          if [ ! -d "android" ]; then
            flutter create . --platforms=android --project-name quote_app --org com.example
          fi

      - name: Build APK (Flutter release)
        if: steps.detect.outputs.project_type == 'flutter'
        working-directory: ${{ steps.detect.outputs.project_dir }}
        run: flutter build apk --release -v

      - name: Upload APK (Flutter)
        if: steps.detect.outputs.project_type == 'flutter'
        uses: actions/upload-artifact@v4
        with:
          name: quote_app-apk
          path: ${{ steps.detect.outputs.project_dir }}/build/app/outputs/flutter-apk/app-release.apk

      # ---------- Gradle path ----------
      - name: Set up Gradle 8.4
        if: steps.detect.outputs.project_type == 'gradle'
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.4

      - name: Assemble debug with Gradle wrapper
        if: steps.detect.outputs.project_type == 'gradle'
        working-directory: ${{ steps.detect.outputs.project_dir }}
        run: |
          if [[ -x "./gradlew" ]]; then
            ./gradlew assembleDebug
          else
            gradle assembleDebug --no-daemon
          fi

      - name: Upload APK (Gradle)
        if: steps.detect.outputs.project_type == 'gradle'
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: |
            ${{ steps.detect.outputs.project_dir }}/**/outputs/apk/**/*.apk
