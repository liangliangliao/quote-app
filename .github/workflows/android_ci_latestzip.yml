name: Android CI (Flutter)

on:
  workflow_dispatch:

env:
  PROJECT_DIR: project

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # allow commit-history-based ZIP selection

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Flutter 3.22.0 (stable)
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.22.0'

      - name: Locate and unzip latest source package (prefer last committed)
        shell: bash
        run: |
          set -euxo pipefail

          # Prefer the most recently COMMITTED zip in git history (top-down scan).
          LATEST_ZIP=""
          if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
            CANDIDATES=$(git log -n 400 --name-only --pretty=format:               | awk '/^quote_app_src_fixed_full_.*\.zip$/ {print}'               | awk '!seen[$0]++')
            for f in $CANDIDATES; do
              if [ -f "$f" ]; then
                LATEST_ZIP="$f"
                break
              fi
            done
          fi

          # Fallback #1: by highest R-suffix (e.g., *_R26.zip)
          if [ -z "${LATEST_ZIP:-}" ]; then
            LATEST_ZIP=$(ls -1 quote_app_src_fixed_full_*.zip 2>/dev/null               | sed -E 's/.*_R([0-9]+)\.zip/\1 &/'               | sort -nr               | awk '{print $2}'               | head -n1 || true)
          fi

          # Fallback #2: latest by modification time
          if [ -z "${LATEST_ZIP:-}" ]; then
            LATEST_ZIP=$(ls -1t quote_app_src_fixed_full_*.zip 2>/dev/null | head -n1 || true)
          fi

          echo "PROJECT_DIR=${{ env.PROJECT_DIR }}" >> $GITHUB_ENV

          if [ -n "${LATEST_ZIP:-}" ]; then
            echo "[info] Picked ZIP: ${LATEST_ZIP}"
            rm -rf "${{ env.PROJECT_DIR }}"
            mkdir -p "${{ env.PROJECT_DIR }}"
            unzip -q "${LATEST_ZIP}" -d "${{ env.PROJECT_DIR }}"
          else
            echo "[info] No source ZIP found; assuming repo already contains the Flutter project."
            ls -la
          fi

      - name: Verify v2 embedding really landed
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euxo pipefail
          echo "== PWD ==" && pwd && ls -la
          echo "== Manifest activity block =="
          sed -n '1,220p' android/app/src/main/AndroidManifest.xml | sed -n '/<activity/,/<\/activity>/p'
          echo "== Manifest <application> block (should include flutterEmbedding=2) =="
          awk '/<application/{flag=1} flag; /<\/application>/{flag=0}' android/app/src/main/AndroidManifest.xml
          echo "== Search for any v1 identifiers in WHOLE repo (should be empty) =="
          grep -R "io.flutter.app" -n . || true
          grep -R "FlutterApplication" -n . || true
          grep -R "GeneratedPluginRegistrant" -n . || true
          echo "== List all AndroidManifest.xml (if multiple are present, we must align them) =="
          find android/app/src -name AndroidManifest.xml -print || true

      - name: Last-resort:recreate Android folder with v2 template
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euxo pipefail
          echo "[info] Recreating android/ with Flutter 3.22 template to guarantee v2 embedding..."
          rm -rf android.bak || true
          mv android android.bak || true
          flutter create . --platforms=android --org com.example --project-name quote_app --overwrite

          # Restore/merge proguard rules (and ensure no v1 trigger strings remain)
          if [ -f android.bak/app/proguard-rules.pro ]; then
            cp -f android.bak/app/proguard-rules.pro android/app/proguard-rules.pro
            sed -i '/GeneratedPluginRegistrant/d' android/app/proguard-rules.pro || true
          fi

          # Ensure <meta-data flutterEmbedding=2/> under <application>
          awk '/<application/{print;print "        <meta-data android:name=\"flutterEmbedding\" android:value=\"2\"/>";next}1'             android/app/src/main/AndroidManifest.xml > /tmp/AndroidManifest.xml
          mv /tmp/AndroidManifest.xml android/app/src/main/AndroidManifest.xml

          echo "[info] Android folder recreated."

      - name: Ensure Gradle verbose logs
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euxo pipefail
          GP=android/gradle.properties
          touch "$GP"
          grep -q '^org\.gradle\.console=plain' "$GP" || echo 'org.gradle.console=plain' >> "$GP"
          grep -q '^org\.gradle\.warning\.mode=all' "$GP" || echo 'org.gradle.warning.mode=all' >> "$GP"
          grep -q '^org\.gradle\.logging\.level=info' "$GP" || echo 'org.gradle.logging.level=info' >> "$GP"
          echo "[info] gradle.properties:"
          cat "$GP"

      - name: Flutter clean & pub get
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euxo pipefail
          flutter --version
          flutter pub get

      - name: Build release APK (Flutter, verbose) with Gradle fallback
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euxo pipefail
          if ! flutter build apk --release -v; then
            echo "[warn] flutter frontdoor failed; trying Gradle assembleRelease..."
            pushd android
            ./gradlew --no-daemon assembleRelease -x lint -x test --stacktrace
            popd
          fi

      - name: List produced APKs
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euxo pipefail
          echo "== Search for any produced APKs =="
          find . -maxdepth 8 -type f -name '*.apk' -print || true

      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-apks
          path: ${{ env.PROJECT_DIR }}/**/*.apk
          if-no-files-found: warn
