name: Build Android APK

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx4g"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sanity check - list repo root
        run: ls -lah
       # ✅ 选取“根目录下最后一次提交”的 zip
      - name: Pick latest committed ZIP in repo root (git)
        id: pickzip
        shell: bash
        run: |
         set -euo pipefail
         cd "$GITHUB_WORKSPACE"
         # 仅根目录 zip（被 git 跟踪的）
           ZIPS=$(git ls-files --full-name | grep -E '^[^/]+\.zip$' || true)
           if [ -z "$ZIPS" ]; then
           echo "No tracked .zip files in repo root." >&2
            exit 1
            fi
            best=""
            best_ct=0
            for z in $ZIPS; do
            ct=$(git log -1 --format=%ct -- "$z" 2>/dev/null || echo 0)
            ct=${ct:-0}
            if [ "$ct" -gt "$best_ct" ]; then
             best_ct=$ct
             best="$z"
            fi
             done
             if [ -z "$best" ]; then
             echo "Could not determine latest committed zip." >&2
           exit 1
           fi
           echo "Picked ZIP: $best (last commit epoch: $best_ct)"
           echo "zip=$GITHUB_WORKSPACE/$best" >> "$GITHUB_OUTPUT"

         - name: Unzip project
           shell: bash
           run: |
            unzip -q "${{ steps.pickzip.outputs.zip }}" -d .
            echo "After unzip:"; ls -lah
           
      # ---------- Flutter path (preferred) ----------
      - name: Set up JDK 17 (for both Flutter & Gradle)
        if: steps.detect.outputs.project_type == 'flutter' || steps.detect.outputs.project_type == 'gradle'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Flutter
        if: steps.detect.outputs.project_type == 'flutter'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'
          channel: stable
          cache: true

      - name: Flutter pub get
        if: steps.detect.outputs.project_type == 'flutter'
        run: flutter pub get
        working-directory: ${{ steps.detect.outputs.project_dir }}

      - name: Ensure Android platform exists
        if: steps.detect.outputs.project_type == 'flutter'
        run: |
          if [ ! -d "android" ]; then
            flutter create . --platforms=android --project-name quote_app --org com.example
          fi
        working-directory: ${{ steps.detect.outputs.project_dir }}

      - name: Build APK (Flutter release)
        if: steps.detect.outputs.project_type == 'flutter'
        run: flutter build apk --release
        working-directory: ${{ steps.detect.outputs.project_dir }}

      - name: Upload APK (Flutter)
        if: steps.detect.outputs.project_type == 'flutter'
        uses: actions/upload-artifact@v4
        with:
          name: quote_app-apk
          path: ${{ steps.detect.outputs.project_dir }}/build/app/outputs/flutter-apk/app-release.apk

      # ---------- Gradle path (fallback) ----------
      - name: Set up Gradle 8.4
        if: steps.detect.outputs.project_type == 'gradle'
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.4

      - name: Assemble debug with Gradle wrapper
        if: steps.detect.outputs.project_type == 'gradle'
        working-directory: ${{ steps.detect.outputs.project_dir }}
        run: |
          if [[ -x "./gradlew" ]]; then
            ./gradlew assembleDebug
          else
            gradle assembleDebug --no-daemon
          fi

      - name: Upload APK (Gradle)
        if: steps.detect.outputs.project_type == 'gradle'
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: |
            ${{ steps.detect.outputs.project_dir }}/**/outputs/apk/**/*.apk
