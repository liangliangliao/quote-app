name: Build Android APK

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx4g"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sanity check - list repo root
        run: ls -lah

      - name: Pick latest ZIP (prefer root tracked; robust fallbacks)
        id: pickzip
        shell: bash
        run: |
          set -euo pipefail
          cd "$GITHUB_WORKSPACE"

          ROOT_TRACKED="$(git ls-files --full-name | awk '/^[^\\/]+\\.zip$/ {print}' || true)"

          pick_by_git_commit() {
            printf "%s\n" "$1" | while IFS= read -r f; do
              [ -n "$f" ] || continue
              ct="$(git log -1 --format=%ct -- "$f" 2>/dev/null || echo 0)"
              printf "%s %s\n" "$ct" "$f"
            done | sort -nr | head -n1 | cut -d' ' -f2-
          }

          SEL=""
          if [ -n "${ROOT_TRACKED:-}" ]; then
            SEL="$(pick_by_git_commit "$ROOT_TRACKED")"
          fi

          if [ -z "$SEL" ]; then
            ANY_TRACKED="$(git ls-files --full-name | awk '/\\.zip$/ {print}' || true)"
            if [ -n "${ANY_TRACKED:-}" ]; then
              SEL="$(pick_by_git_commit "$ANY_TRACKED")"
            fi
          fi

          if [ -z "$SEL" ]; then
            SEL="$(ls -1t *.zip 2>/dev/null | head -n1 || true)"
          fi

          if [ -z "$SEL" ]; then
            SEL="$(find . -maxdepth 6 -type f -name '*.zip' -printf '%T@ %p\n' 2>/dev/null | sort -nr | head -n1 | cut -d' ' -f2- || true)"
            SEL="${SEL#./}"
          fi

          if [ -z "$SEL" ]; then
            echo "No .zip files found (tracked or untracked)."
            echo "Tip: 把源码 zip 放在仓库根目录，或确保它被 git 追踪。"
            exit 1
          fi

          echo "Picked ZIP: $SEL"
          echo "zip=$GITHUB_WORKSPACE/$SEL" >> "$GITHUB_OUTPUT"

      - name: Unzip project
        shell: bash
        run: |
          unzip -q "${{ steps.pickzip.outputs.zip }}" -d .
          echo "After unzip:"; ls -lah

      - name: Detect project type and root
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          FLUTTER_DIR="$(find . -maxdepth 6 -type f -name pubspec.yaml | head -n1 | xargs -I{} dirname {} || true)"
          GRADLE_DIR=""
          if [ -z "$FLUTTER_DIR" ]; then
            GRADLE_DIR="$(find . -maxdepth 6 -type f \( -name settings.gradle -o -name settings.gradle.kts \) | head -n1 | xargs -I{} dirname {} || true)"
          fi
          if [ -n "$FLUTTER_DIR" ]; then
            echo "project_type=flutter" >> "$GITHUB_OUTPUT"
            echo "project_dir=$FLUTTER_DIR" >> "$GITHUB_OUTPUT"
            echo "Detected Flutter project at: $FLUTTER_DIR"
          elif [ -n "$GRADLE_DIR" ]; then
            echo "project_type=gradle" >> "$GITHUB_OUTPUT"
            echo "project_dir=$GRADLE_DIR" >> "$GITHUB_OUTPUT"
            echo "Detected Android Gradle project at: $GRADLE_DIR"
          else
            echo "❌ 未检测到 Flutter 或 Android Gradle 工程（缺少 pubspec.yaml / settings.gradle）"
            exit 2
          fi

      # ---------- Flutter path (preferred) ----------
      - name: Set up JDK 17 (for both Flutter & Gradle)
        if: steps.detect.outputs.project_type == 'flutter' || steps.detect.outputs.project_type == 'gradle'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Flutter
        if: steps.detect.outputs.project_type == 'flutter'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'
          channel: stable
          cache: true

      - name: Resolve Flutter deps (pin v2-safe) & pub get
        if: steps.detect.outputs.project_type == 'flutter'
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          rm -rf "$HOME/.pub-cache"
          flutter clean || true
          dart pub remove workmanager || true
          dart pub add workmanager:^0.7.0
          flutter pub get
          echo "== Direct dependencies resolved =="
          flutter pub deps --style=compact | sed -n '/direct dependencies:/,/dev dependencies:/p'
          PUB_CACHE="${PUB_CACHE:-$HOME/.pub-cache}"
          echo "== Scan v1 markers in pub cache =="
          grep -R --include=*.java --include=*.kt -nE 'PluginRegistry\.Registrar|registerWith\s*\(|ShimPluginRegistry|io\.flutter\.app|FlutterApplication' "$PUB_CACHE" 2>/dev/null || true

      - name: Diagnose Android v1 offenders (fail early with list)
        if: steps.detect.outputs.project_type == 'flutter'
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          echo "== Scan project android/ for v1 markers =="
          (grep -R -nE 'io\.flutter\.app|FlutterApplication|GeneratedPluginRegistrant|PluginRegistry\.Registrar|registerWith\s*\(|ShimPluginRegistry' android || true)
          echo "== Scan pub cache (plugins) for v1 markers =="
          PUB_CACHE="${PUB_CACHE:-$HOME/.pub-cache}"
          MATCHES="$(grep -R --include=*.java --include=*.kt -nE 'PluginRegistry\.Registrar|registerWith\s*\(|ShimPluginRegistry|io\.flutter\.app|FlutterApplication' "$PUB_CACHE" 2>/dev/null || true)"
          if [ -n "$MATCHES" ]; then
            echo "$MATCHES"
            echo "::error::Found Android v1 embedding in above plugin files. Upgrade/replace those plugins."
            exit 1
          else
            echo "No v1 markers found in pub cache."
          fi

      - name: Remove checked-in GeneratedPluginRegistrant (old template leftover)
        if: steps.detect.outputs.project_type == 'flutter'
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          rm -f android/app/src/main/java/io/flutter/plugins/GeneratedPluginRegistrant.java
          rm -f android/app/src/main/kotlin/io/flutter/plugins/GeneratedPluginRegistrant.kt

      - name: Re-check app code is v1-clean
        if: steps.detect.outputs.project_type == 'flutter'
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          grep -R --include=*.kt --include=*.java -nE 'io\.flutter\.app|FlutterApplication|GeneratedPluginRegistrant\.registerWith|PluginRegistry\.Registrar|registerWith\s*\(|ShimPluginRegistry|PluginRegistrantCallback' android && { echo "::error::app 代码仍有 v1 痕迹"; exit 1; } || echo "app 代码已无 v1 痕迹"

      - name: Diagnose v1 markers in *app code* only
        if: steps.detect.outputs.project_type == 'flutter'
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          echo "== Scan android/ (app code) for v1 markers =="
          MATCHES="$(grep -R --include=*.kt --include=*.java -nE 'io\.flutter\.app|FlutterApplication|GeneratedPluginRegistrant\.registerWith|PluginRegistry\.Registrar|registerWith\s*\(|ShimPluginRegistry|PluginRegistrantCallback' android 2>/dev/null || true)"
          if [ -n "$MATCHES" ]; then
            echo "$MATCHES"
            echo "::error::Your *app* android code still references Android v1 embedding APIs above."
            exit 1
          else
            echo "No v1 markers found in app code (android/)."
          fi

      - name: Sanity:show project dir & critical files
        if: steps.detect.outputs.project_type == 'flutter'
        shell: bash
        working-directory: ${{ steps.detect.outputs.project_dir }}
        run: |
          pwd
          ls -al android/app/src/main/java/io/flutter/plugins || true
          sed -n '1,120p' android/app/src/main/AndroidManifest.xml

      # ✅ 新增：在不改动其它步骤的前提下，规范 Manifest 为 v2（必要时才修改）
      - name: Normalize AndroidManifest to v2 (MainActivity + embedding=2)
        if: steps.detect.outputs.project_type == 'flutter'
        shell: bash
        working-directory: ${{ steps.detect.outputs.project_dir }}
        run: |
          set -euo pipefail
          MANI="android/app/src/main/AndroidManifest.xml"
          [ -f "$MANI" ] || exit 0
          # 去掉任何 FlutterApplication v1 标记
          sed -i 's/android:name="io\.flutter\.app\.FlutterApplication"[^>]*//g' "$MANI"
          # 确保 embedding=2 meta-data 存在（插在 <application> 后）
          if ! grep -q 'android:name="flutterEmbedding"' "$MANI"; then
            awk '{
              print
            } /<application[^>]*>/ && !i {print "        <meta-data android:name=\"flutterEmbedding\" android:value=\"2\"/>"; i=1}' "$MANI" > "$MANI.__tmp__" && mv "$MANI.__tmp__" "$MANI"
          fi
          # 若仍使用框架 FlutterActivity，改为指向你的 MainActivity
          if grep -q 'android:name="io.flutter.embedding.android.FlutterActivity"' "$MANI"; then
            sed -i 's/android:name="io\.flutter\.embedding\.android\.FlutterActivity"/android:name=".MainActivity"/' "$MANI"
          fi

      - name: Build APK (Flutter release)
        if: steps.detect.outputs.project_type == 'flutter'
        run: flutter build apk --release
        working-directory: ${{ steps.detect.outputs.project_dir }}

      - name: Upload APK (Flutter)
        if: steps.detect.outputs.project_type == 'flutter'
        uses: actions/upload-artifact@v4
        with:
          name: quote_app-apk
          path: ${{ steps.detect.outputs.project_dir }}/build/app/outputs/flutter-apk/app-release.apk

      # ---------- Gradle path (fallback) ----------
      - name: Set up Gradle 8.4
        if: steps.detect.outputs.project_type == 'gradle'
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.4

      - name: Assemble debug with Gradle wrapper
        if: steps.detect.outputs.project_type == 'gradle'
        working-directory: ${{ steps.detect.outputs.project_dir }}
        run: |
          if [[ -x "./gradlew" ]]; then
            ./gradlew assembleDebug
          else
            gradle assembleDebug --no-daemon
          fi

      - name: Upload APK (Gradle)
        if: steps.detect.outputs.project_type == 'gradle'
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: |
            ${{ steps.detect.outputs.project_dir }}/**/outputs/apk/**/*.apk
