name: Build Android APK

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx4g"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sanity check - list repo root
        run: ls -lah

      # ① 选最新 zip（保持你现有逻辑，但更健壮）
      - name: Pick latest ZIP (prefer root tracked; robust fallbacks)
        id: pickzip
        shell: bash
        run: |
          set -euo pipefail
          cd "$GITHUB_WORKSPACE"

          pick_by_git_commit() {
            printf "%s\n" "$1" | while IFS= read -r f; do
              [ -n "$f" ] || continue
              ct="$(git log -1 --format=%ct -- "$f" 2>/dev/null || echo 0)"
              printf "%s %s\n" "$ct" "$f"
            done | sort -nr | head -n1 | cut -d' ' -f2-
          }

          ROOT_TRACKED="$(git ls-files --full-name | awk '/^[^\/]+\.zip$/ {print}' || true)"
          SEL=""
          if [ -n "${ROOT_TRACKED:-}" ]; then
            SEL="$(pick_by_git_commit "$ROOT_TRACKED")"
          fi
          if [ -z "$SEL" ]; then
            ANY_TRACKED="$(git ls-files --full-name | awk '/\.zip$/ {print}' || true)"
            if [ -n "${ANY_TRACKED:-}" ]; then
              SEL="$(pick_by_git_commit "$ANY_TRACKED")"
            fi
          fi
          if [ -z "$SEL" ]; then
            SEL="$(ls -1t *.zip 2>/dev/null | head -n1 || true)"
          fi
          if [ -z "$SEL" ]; then
            SEL="$(find . -maxdepth 6 -type f -name '*.zip' -printf '%T@ %p\n' 2>/dev/null | sort -nr | head -n1 | cut -d' ' -f2- || true)"
            SEL="${SEL#./}"
          fi
          [ -n "$SEL" ] || { echo "No .zip files found."; exit 1; }
          echo "Picked ZIP: $SEL"
          echo "zip=$GITHUB_WORKSPACE/$SEL" >> "$GITHUB_OUTPUT"

      - name: Unzip project
        shell: bash
        run: |
          unzip -q "${{ steps.pickzip.outputs.zip }}" -d .
          echo "After unzip:"; ls -lah

      - name: Detect project type and root
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          FLUTTER_DIR="$(find . -maxdepth 6 -type f -name pubspec.yaml | head -n1 | xargs -I{} dirname {} || true)"
          GRADLE_DIR=""
          if [ -z "$FLUTTER_DIR" ]; then
            GRADLE_DIR="$(find . -maxdepth 6 -type f \( -name settings.gradle -o -name settings.gradle.kts \) | head -n1 | xargs -I{} dirname {} || true)"
          fi
          if [ -n "$FLUTTER_DIR" ]; then
            echo "project_type=flutter" >> "$GITHUB_OUTPUT"
            echo "project_dir=$FLUTTER_DIR" >> "$GITHUB_OUTPUT"
            echo "Detected Flutter project at: $FLUTTER_DIR"
          elif [ -n "$GRADLE_DIR" ]; then
            echo "project_type=gradle" >> "$GITHUB_OUTPUT"
            echo "project_dir=$GRADLE_DIR" >> "$GITHUB_OUTPUT"
            echo "Detected Android Gradle project at: $GRADLE_DIR"
          else
            echo "❌ 未检测到 Flutter 或 Android Gradle 工程（缺少 pubspec.yaml / settings.gradle）"
            exit 2
          fi

      - name: Set up JDK 17 (for both Flutter & Gradle)
        if: steps.detect.outputs.project_type == 'flutter' || steps.detect.outputs.project_type == 'gradle'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      # ② 默认先用 Flutter 3.22（严格模式）
      - name: Set up Flutter (strict / 3.22)
        if: steps.detect.outputs.project_type == 'flutter'
        id: flutter_strict
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'
          channel: stable
          cache: true

      - name: Resolve Flutter deps (pin v2-safe) & pub get
        if: steps.detect.outputs.project_type == 'flutter'
        id: pubget_strict
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          rm -rf "$HOME/.pub-cache"
          flutter clean || true
          dart pub remove workmanager || true
          dart pub add workmanager:^0.7.0
          flutter pub get
          echo "== .flutter-plugins ==========="
          [ -f .flutter-plugins ] && sed -n '1,120p' .flutter-plugins || true
          echo "== .flutter-plugins-dependencies ==========="
          [ -f .flutter-plugins-dependencies ] && sed -n '1,120p' .flutter-plugins-dependencies || true

      - name: Clean ANY checked-in GeneratedPluginRegistrant
        if: steps.detect.outputs.project_type == 'flutter'
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          find android -type f -regex '.*io/flutter/plugins/GeneratedPluginRegistrant\.\(java\|kt\)$' -print -delete || true

      - name: Normalize all AndroidManifest.xml to v2
        if: steps.detect.outputs.project_type == 'flutter'
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t MANIS < <(find android/app/src -type f -name AndroidManifest.xml)
          for MANI in "${MANIS[@]}"; do
            echo "Normalizing $MANI"
            sed -i 's/android:name="io\.flutter\.app\.FlutterApplication"[^>]*/ /g' "$MANI"
            if ! grep -q 'android:name="flutterEmbedding"' "$MANI"; then
              awk '{print} /<application[^>]*>/ && !i {print "        <meta-data android:name=\"flutterEmbedding\" android:value=\"2\"/>"; i=1}' "$MANI" > "$MANI.__tmp__" && mv "$MANI.__tmp__" "$MANI"
            fi
            if grep -q 'android:name="io.flutter.embedding.android.FlutterActivity"' "$MANI"; then
              sed -i 's/android:name="io\.flutter\.embedding\.android\.FlutterActivity"/android:name=".MainActivity"/' "$MANI"
            fi
          done

      - name: Deep diagnose v1 markers in app code & manifests
        if: steps.detect.outputs.project_type == 'flutter'
        id: v1app
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          echo "== Scan app(android/) for v1 markers =="
          APP_MATCHES="$(grep -R --include=*.kt --include=*.java -nE \
            'io\.flutter\.app\.(Flutter(Activity|FragmentActivity|Application))|io\.flutter\.view\.FlutterMain|GeneratedPluginRegistrant\.registerWith|PluginRegistry(\.Registrar)?|registerWith\s*\(|ShimPluginRegistry|PluginRegistrantCallback' \
            android 2>/dev/null || true)"
          echo "$APP_MATCHES"
          echo "== Scan ALL manifests =="
          MANI_MATCHES="$(grep -R -nE 'io\.flutter\.app\.FlutterApplication|android:name=\"io\.flutter\.app\.FlutterApplication\"' android/app/src 2>/dev/null || true)"
          echo "$MANI_MATCHES"
          CNT=0
          [ -n "$APP_MATCHES" ] && CNT=$((CNT+1))
          [ -n "$MANI_MATCHES" ] && CNT=$((CNT+1))
          echo "count=$CNT" >> "$GITHUB_OUTPUT"

      - name: Diagnose Android v1 offenders in plugins (do not fail, count only)
        if: steps.detect.outputs.project_type == 'flutter'
        id: v1plugins
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          PUB_CACHE="${PUB_CACHE:-$HOME/.pub-cache}"
          echo "Scanning $PUB_CACHE for Android v1 markers..."
          MATCHES="$(grep -R --include=*.java --include=*.kt -nE \
            'io\.flutter\.app\.(Flutter(Activity|FragmentActivity|Application))|io\.flutter\.view\.FlutterMain|PluginRegistry(\.Registrar)?|registerWith\s*\(|ShimPluginRegistry|GeneratedPluginRegistrant\.registerWith|PluginRegistrantCallback' \
            "$PUB_CACHE" 2>/dev/null || true)"
          echo "$MATCHES"
          COUNT=0
          [ -n "$MATCHES" ] && COUNT=1
          echo "count=$COUNT" >> "$GITHUB_OUTPUT"

      - name: TEMP:bypass v1 gate in flutter_tools (CI only; safe when both counts=0)
        if: steps.detect.outputs.project_type == 'flutter' && steps.v1app.outputs.count == '0' && steps.v1plugins.outputs.count == '0'
        shell: bash
        run: |
          set -euo pipefail
          echo "FLUTTER_ROOT = ${FLUTTER_ROOT}"
          TOOLS_DIR="$FLUTTER_ROOT/packages/flutter_tools/lib/src"
          sed -i 's/checkForDeprecation();//' "$TOOLS_DIR/project.dart" || true
          sed -i "s/Build failed due to use of deleted Android v1 embedding\./Bypassed v1 gate in CI./" "$TOOLS_DIR/project.dart" || true

      # ====== ⬇️ 这里开始：替换为“捕获→注解→按原样失败”三步（Flutter 3.22 严格构建） ======
      - name: Build APK (Flutter 3.22 strict · capture logs)
        if: steps.detect.outputs.project_type == 'flutter' && steps.v1app.outputs.count == '0' && steps.v1plugins.outputs.count == '0'
        id: build_strict
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          (flutter build apk --release -v) 2>&1 | tee build_apk_strict.log
          echo "code=${PIPESTATUS[0]}" >> "$GITHUB_OUTPUT"

      - name: Annotate compiler errors (Flutter 3.22 strict)
        if: steps.detect.outputs.project_type == 'flutter' && steps.v1app.outputs.count == '0' && steps.v1plugins.outputs.count == '0'
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          LOG=build_apk_strict.log
          touch "$LOG"
          grep -E "^/.+\.java:[0-9]+: error: " "$LOG" | sed -E 's#^(/.+\.java):([0-9]+): error: (.*)$#::error file=\1,line=\2::\3#g' || true
          grep -E "^e: /.+\.kt: \([0-9]+, [0-9]+\): " "$LOG" | sed -E 's#^e: (/.+\.kt): \(([0-9]+), ([0-9]+)\): (.*)$#::error file=\1,line=\2,col=\3::\4#g' || true
          grep -E "^(.*/)?lib/.+\.dart:[0-9]+:[0-9]+: (Error|Warning): " "$LOG" | sed -E 's#^(.*/)?(lib/.+\.dart):([0-9]+):([0-9]+): (Error|Warning): (.*)$#::error file=\2,line=\3,col=\4::\6#g' || true
          if grep -q "Build failed due to use of deleted Android v1 embedding" "$LOG"; then
            echo "::error::Flutter 工具检测到 Android v1 嵌入。可能位置如下："
            grep -R --include=*.{kt,java} -nE 'io\.flutter\.app\.(Flutter(Activity|FragmentActivity|Application))|io\.flutter\.view\.FlutterMain|GeneratedPluginRegistrant\.registerWith|PluginRegistry(\.Registrar)?|registerWith\s*\(|ShimPluginRegistry|PluginRegistrantCallback' android 2>/dev/null | sed -E 's#^(.+):([0-9]+):(.*)$#::error file=\1,line=\2::\3#g' || true
            PUB_CACHE="${PUB_CACHE:-$HOME/.pub-cache}"
            grep -R --include=*.{kt,java} -nE 'io\.flutter\.app\.(Flutter(Activity|FragmentActivity|Application))|io\.flutter\.view\.FlutterMain|GeneratedPluginRegistrant\.registerWith|PluginRegistry(\.Registrar)?|registerWith\s*\(|ShimPluginRegistry|PluginRegistrantCallback' "$PUB_CACHE" 2>/dev/null | head -n 300 | sed -E 's#^(.+):([0-9]+):(.*)$#::warning file=\1,line=\2::\3#g' || true
          fi

      - name: Fail if build failed (Flutter 3.22 strict)
        if: steps.detect.outputs.project_type == 'flutter' && steps.v1app.outputs.count == '0' && steps.v1plugins.outputs.count == '0'
        shell: bash
        run: |
          exit "${{ steps.build_strict.outputs.code }}"
      # ====== ⬆️ Flutter 3.22 严格构建（三步） ======

      # ③ 发现 v1 → 回退到 v1 兼容 SDK（3.19.6）再构建
      - name: Set up Flutter (fallback / 3.19.6 v1-compatible)
        if: steps.detect.outputs.project_type == 'flutter' && (steps.v1app.outputs.count != '0' || steps.v1plugins.outputs.count != '0')
        id: flutter_fallback
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.6'
          channel: stable
          cache: true

      - name: Pub get (fallback)
        if: steps.detect.outputs.project_type == 'flutter' && (steps.v1app.outputs.count != '0' || steps.v1plugins.outputs.count != '0')
        working-directory: ${{ steps.detect.outputs.project_dir }}
        run: flutter pub get

      # ====== ⬇️ Flutter 3.19.6 回退构建（三步） ======
      - name: Build APK (Flutter fallback 3.19.6 · capture logs)
        if: steps.detect.outputs.project_type == 'flutter' && (steps.v1app.outputs.count != '0' || steps.v1plugins.outputs.count != '0')
        id: build_fallback
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          (flutter build apk --release -v) 2>&1 | tee build_apk_fb.log
          echo "code=${PIPESTATUS[0]}" >> "$GITHUB_OUTPUT"

      - name: Annotate compiler errors (Flutter 3.19.6 fallback)
        if: steps.detect.outputs.project_type == 'flutter' && (steps.v1app.outputs.count != '0' || steps.v1plugins.outputs.count != '0')
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          LOG=build_apk_fb.log
          touch "$LOG"
          grep -E "^/.+\.java:[0-9]+: error: " "$LOG" | sed -E 's#^(/.+\.java):([0-9]+): error: (.*)$#::error file=\1,line=\2::\3#g' || true
          grep -E "^e: /.+\.kt: \([0-9]+, [0-9]+\): " "$LOG" | sed -E 's#^e: (/.+\.kt): \(([0-9]+), ([0-9]+)\): (.*)$#::error file=\1,line=\2,col=\3::\4#g' || true
          grep -E "^(.*/)?lib/.+\.dart:[0-9]+:[0-9]+: (Error|Warning): " "$LOG" | sed -E 's#^(.*/)?(lib/.+\.dart):([0-9]+):([0-9]+): (Error|Warning): (.*)$#::error file=\2,line=\3,col=\4::\6#g' || true

      - name: Fail if build failed (Flutter 3.19.6 fallback)
        if: steps.detect.outputs.project_type == 'flutter' && (steps.v1app.outputs.count != '0' || steps.v1plugins.outputs.count != '0')
        shell: bash
        run: |
          exit "${{ steps.build_fallback.outputs.code }}"
      # ====== ⬆️ Flutter 3.19.6 回退构建（三步） ======

      - name: Upload APK (Flutter)
        if: steps.detect.outputs.project_type == 'flutter'
        uses: actions/upload-artifact@v4
        with:
          name: quote_app-apk
          path: ${{ steps.detect.outputs.project_dir }}/build/app/outputs/flutter-apk/app-release.apk

      # ---------- Gradle path (fallback) ----------
      - name: Set up Gradle 8.4
        if: steps.detect.outputs.project_type == 'gradle'
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.4

      # ====== ⬇️ Gradle 构建：同样捕获→注解→失败 ======
      - name: Assemble debug with Gradle wrapper (capture logs)
        if: steps.detect.outputs.project_type == 'gradle'
        id: gradle_build
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          if [[ -x "./gradlew" ]]; then
            (./gradlew assembleDebug --stacktrace --warning-mode all) 2>&1 | tee gradle_build.log
          else
            (gradle assembleDebug --no-daemon --stacktrace --warning-mode all) 2>&1 | tee gradle_build.log
          fi
          echo "code=${PIPESTATUS[0]}" >> "$GITHUB_OUTPUT"

      - name: Annotate compiler errors (Gradle)
        if: steps.detect.outputs.project_type == 'gradle'
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          LOG=gradle_build.log
          touch "$LOG"
          grep -E "^/.+\.java:[0-9]+: error: " "$LOG" | sed -E 's#^(/.+\.java):([0-9]+): error: (.*)$#::error file=\1,line=\2::\3#g' || true
          grep -E "^e: /.+\.kt: \([0-9]+, [0-9]+\): " "$LOG" | sed -E 's#^e: (/.+\.kt): \(([0-9]+), ([0-9]+)\): (.*)$#::error file=\1,line=\2,col=\3::\4#g' || true

      - name: Fail if build failed (Gradle)
        if: steps.detect.outputs.project_type == 'gradle'
        shell: bash
        run: |
          exit "${{ steps.gradle_build.outputs.code }}"
      # ====== ⬆️ Gradle 构建：同样捕获→注解→失败 ======

      - name: Upload APK (Gradle)
        if: steps.detect.outputs.project_type == 'gradle'
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: |
            ${{ steps.detect.outputs.project_dir }}/**/outputs/apk/**/*.apk

      # 方便排查：总是上传日志（不影响原有产物）
      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            ${{ steps.detect.outputs.project_dir }}/build_apk_strict.log
            ${{ steps.detect.outputs.project_dir }}/build_apk_fb.log
            ${{ steps.detect.outputs.project_dir }}/gradle_build.log
          if-no-files-found: ignore
