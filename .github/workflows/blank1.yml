name: Build Android APK (Flutter)

on:
  workflow_dispatch:
    inputs:
      use_aliyun:
        description: "Enable Aliyun mirrors (optional)"
        type: boolean
        default: false
  push:
    branches: [ main, master ]

jobs:
  build-android:
    runs-on: ubuntu-latest
    env:
      PROJECT_DIR: project

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      # 选出仓库中“最后一次提交改动”的 zip（请把 CAUSE12 放根目录并为最新提交）
      - name: Pick latest ZIP in repo by last commit time
        id: pickzip
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t FILES < <(git ls-files '*.zip')
          if [ ${#FILES[@]} -eq 0 ]; then
            echo "❌ No zip files found."; exit 1
          fi
          latest=""; latest_ts=0
          for f in "${FILES[@]}"; do
            ts=$(git log -1 --format=%ct -- "$f" || echo 0)
            if (( ts > latest_ts )); then latest_ts=$ts; latest="$f"; fi
          done
          echo "LATEST_ZIP=$latest" >> "$GITHUB_ENV"
          echo "Picked ZIP: $latest"

      - name: Install unzip tools
        run: sudo apt-get update -y && sudo apt-get install -y unzip p7zip-full

      - name: Unzip project
        shell: bash
        run: |
          set -euo pipefail
          rm -rf "$PROJECT_DIR"; mkdir -p "$PROJECT_DIR"
          unzip -q "$LATEST_ZIP" -d "$PROJECT_DIR" || 7z x "$LATEST_ZIP" -o"$PROJECT_DIR" -y >/dev/null
          if [ ! -f "$PROJECT_DIR/pubspec.yaml" ]; then
            inner=$(find "$PROJECT_DIR" -maxdepth 3 -type f -name pubspec.yaml | head -n1 || true)
            if [ -z "$inner" ]; then echo "❌ pubspec.yaml not found after unzip"; exit 1; fi
            echo "PROJECT_DIR=$(dirname "$inner")" >> "$GITHUB_ENV"
          else
            echo "PROJECT_DIR=$PROJECT_DIR" >> "$GITHUB_ENV"
          fi
          echo "Resolved PROJECT_DIR=${PROJECT_DIR}"

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with: { distribution: temurin, java-version: "17" }

      - name: Setup Flutter 3.22.0
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.22.0"
          channel: stable
          cache: true

      - name: Setup Android SDK (env & path)
        shell: bash
        run: |
          echo "ANDROID_SDK_ROOT=/usr/local/lib/android/sdk" >> "$GITHUB_ENV"
          echo "ANDROID_HOME=/usr/local/lib/android/sdk" >> "$GITHUB_ENV"
          echo "/usr/local/lib/android/sdk/cmdline-tools/latest/bin" >> "$GITHUB_PATH"

      # ✅ 改动 1（必须）：在任何 Gradle/构建之前，先写 local.properties + 导出 FLUTTER_ROOT
      - name: Export FLUTTER_ROOT & write android/local.properties (must run BEFORE any Gradle)
        shell: bash
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          set -euo pipefail
          FLUTTER_BIN="$(which flutter)"
          FLUTTER_SDK="$(dirname "$(dirname "$(readlink -f "$FLUTTER_BIN")")")"
          echo "FLUTTER_ROOT=$FLUTTER_SDK" >> "$GITHUB_ENV"
          mkdir -p android
          {
            printf "sdk.dir=%s\n" "$ANDROID_SDK_ROOT"
            printf "flutter.sdk=%s\n" "$FLUTTER_SDK"
          } > android/local.properties
          echo "Wrote android/local.properties:"
          cat android/local.properties

      # ✅ 改动 2（可选）：需要阿里镜像时开启（与 CAUSE12 的 settings.gradle 联动）
      - name: Toggle Aliyun mirrors (optional)
        if: ${{ inputs.use_aliyun }}
        shell: bash
        run: echo "USE_ALIYUN=1" >> "$GITHUB_ENV"

      - name: Accept Android licenses (robust)
        shell: bash
        run: |
          set +e; set +o pipefail
          yes | sdkmanager --licenses >/dev/null 2>&1
          code=$?; if [ $code -ne 0 ] && [ $code -ne 141 ]; then exit $code; fi
          echo "Android licenses accepted (code=$code)."

      - name: Install Android packages
        shell: bash
        run: sdkmanager "platform-tools" "build-tools;34.0.0" "platforms;android-34"

      - name: Quick sanity check
        shell: bash
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          test -f pubspec.yaml
          test -f android/settings.gradle
          test -f android/app/build.gradle
          echo "OK: basic files present."

      - name: Flutter clean & pub get
        shell: bash
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          flutter --version
          flutter clean
          flutter pub get

      - name: Build release APK
        shell: bash
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          set -euxo pipefail
          flutter --version
          if ! flutter build apk --release -v; then
            echo "[warn] flutter tool couldn't find the APK; attempting salvage..." >&2
          fi
          echo "== Search for any produced APKs =="
          find . -maxdepth 8 -type f -name "*.apk" -print || true
          FOUND=$(find . -maxdepth 8 -type f -name "*.apk" | head -n1 || true)
          if [ -n "$FOUND" ]; then
            mkdir -p build/app/outputs/flutter-apk
            cp "$FOUND" build/app/outputs/flutter-apk/app-release.apk || cp "$FOUND" build/app/outputs/flutter-apk/$(basename "$FOUND")
            echo "Salvaged APK -> build/app/outputs/flutter-apk/"
          else
            echo "No APK files found after build." >&2
            exit 1
          fi

      - name: Show APK outputs
        shell: bash
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          echo "== APK outputs =="
          ls -la build/app/outputs || true
          ls -la build/app/outputs/flutter-apk || true
          ls -la build/app/outputs/apk/release || true
          ls -la android/app/build/outputs/flutter-apk || true
# 关键：构建时打开 --stacktrace/--info，并把完整日志收集成文件
      - name: Build APK (Flutter, verbose)
        working-directory: ${{ env.PROJECT_DIR }}
        env:
          GRADLE_OPTS: "-Dorg.gradle.console=plain -Dorg.gradle.warning.mode=all"
        run: |
          set -o pipefail
          flutter build apk -v --release | tee $GITHUB_WORKSPACE/flutter-build.log

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: |
            ${{ env.PROJECT_DIR }}/build/app/outputs/flutter-apk/app-release.apk
            ${{ env.PROJECT_DIR }}/build/app/outputs/flutter-apk/*.apk
            ${{ env.PROJECT_DIR }}/build/app/outputs/apk/release/*.apk
            ${{ env.PROJECT_DIR }}/android/app/build/outputs/flutter-apk/*.apk
          if-no-files-found: warn
