name: Build Android APK (Flutter)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build-android:
    runs-on: ubuntu-latest
    env:
      # 解压后的默认工作目录名称（先当“占位”，后续脚本会自动纠正为真实的项目根）
      PROJECT_DIR: project

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 需要 git 日志来判断“最后一次被提交改动”的 zip

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Flutter 3.22.0
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.22.0"
          channel: "stable"
          cache: true

      - name: Pick latest ZIP in repo by last commit time
        id: pickzip
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t FILES < <(git ls-files '*.zip')
          if [ ${#FILES[@]} -eq 0 ]; then
            echo "❌ No zip files found in repository."
            exit 1
          fi
          latest=""
          latest_ts=0
          for f in "${FILES[@]}"; do
            ts=$(git log -1 --format=%ct -- "$f" || echo 0)
            if (( ts > latest_ts )); then latest_ts=$ts; latest="$f"; fi
          done
          echo "Latest zip by commit time: $latest (ts=$latest_ts)"
          echo "LATEST_ZIP=$latest" >> "$GITHUB_ENV"

      - name: Unzip project
        shell: bash
        run: |
          set -euo pipefail
          rm -rf "$PROJECT_DIR"
          mkdir -p "$PROJECT_DIR"
          bsdtar -xf "$LATEST_ZIP" -C "$PROJECT_DIR"
          # 如果 zip 外面包了一层目录，自动定位包含 pubspec.yaml 的真实项目根
          if [ ! -f "$PROJECT_DIR/pubspec.yaml" ]; then
            inner=$(find "$PROJECT_DIR" -maxdepth 2 -type f -name pubspec.yaml | head -n1 || true)
            if [ -z "$inner" ]; then
              echo "❌ pubspec.yaml not found in unzipped content"
              find "$PROJECT_DIR" -maxdepth 3 -print
              exit 1
            fi
            export PROJECT_DIR_REAL=$(dirname "$inner")
            echo "PROJECT_DIR=$PROJECT_DIR_REAL" >> "$GITHUB_ENV"
            echo "Detected project dir: $PROJECT_DIR_REAL"
          else
            echo "PROJECT_DIR=$PROJECT_DIR" >> "$GITHUB_ENV"
          fi

      - name: Show detected project tree
        shell: bash
        run: |
          set -euo pipefail
          echo "Using PROJECT_DIR=$PROJECT_DIR"
          ls -la "$PROJECT_DIR"
          ls -la "$PROJECT_DIR/android" || true

      - name: Write android/local.properties (Flutter SDK path)
        shell: bash
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          set -euo pipefail
          # 解析 flutter SDK 绝对路径
          FLUTTER_BIN="$(which flutter)"
          if [ ! -x "$FLUTTER_BIN" ]; then
            echo "❌ flutter not found in PATH"
            exit 1
          fi
          FLUTTER_SDK="$(dirname "$(dirname "$(readlink -f "$FLUTTER_BIN")")")"
          echo "Flutter SDK resolved to: $FLUTTER_SDK"
          mkdir -p android
          {
            echo "flutter.sdk=$FLUTTER_SDK"
          } > android/local.properties
          echo "Wrote android/local.properties:"
          cat android/local.properties

      - name: Install Android SDK Platform/Build-Tools 34
        shell: bash
        run: |
          set -euo pipefail
          yes | sdkmanager --licenses >/dev/null || true
          sdkmanager "platform-tools" >/dev/null
          sdkmanager "platforms;android-34" >/dev/null
          sdkmanager "build-tools;34.0.0" >/dev/null

      - name: Flutter clean & pub get
        shell: bash
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          set -euo pipefail
          flutter --version
          flutter clean
          flutter pub get

      # 可选：先构建 debug 便于快速验证
      # - name: Build debug APK (optional)
      #   shell: bash
      #   working-directory: ${{ env.PROJECT_DIR }}
      #   run: flutter build apk --debug

      - name: Build release APK
        shell: bash
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          set -euo pipefail
          flutter build apk --release
          ls -la build/app/outputs/flutter-apk || true

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: |
            ${{ env.PROJECT_DIR }}/build/app/outputs/flutter-apk/app-release.apk
            ${{ env.PROJECT_DIR }}/build/app/outputs/flutter-apk/app-debug.apk
          if-no-files-found: warn
